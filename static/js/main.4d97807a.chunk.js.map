{"version":3,"sources":["components/App.js","index.js"],"names":["App","props","executeCode","e","console","log","editorContentValue","setState","editorContent","changeMode","event","target","innerHTML","theme","ReactDOM","findDOMNode","appRef","current","style","background","downloadCode","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","state","mode","fontSize","React","createRef","modeRef","aceRef","onEditorChange","bind","newValue","this","className","ref","onClick","saveRef","id","name","height","width","onChange","marginLeft","srcDoc","Component","render","querySelector"],"mappings":"8SA2HeA,E,kDA1GX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmBVC,YAAc,SAACC,GACXC,QAAQC,IAAI,EAAKC,oBACjB,EAAKC,SAAS,CACVC,cAAe,EAAKF,sBAvBT,EA2BnBG,WAAa,SAACC,GACqB,cAA3BA,EAAMC,OAAOC,WACbF,EAAMC,OAAOC,UAAY,aACzB,EAAKL,SAAS,CACVM,MAAO,wBAEXC,IAASC,YAAY,EAAKC,OAAOC,SAASC,MAAMC,WAAa,UAE7DT,EAAMC,OAAOC,UAAY,YACzB,EAAKL,SAAS,CACVM,MAAO,WAEXC,IAASC,YAAY,EAAKC,OAAOC,SAASC,MAAMC,WAAa,YAvClD,EA4CnBC,aAAe,SAACjB,GAEZ,IAAMkB,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAAC,GAAD,OAAI,EAAKnB,qBAAuB,CAACoB,KAAM,eAC7DL,EAAQM,KAAOC,IAAIC,gBAAgBL,GACnCH,EAAQS,SAAW,eACnBR,SAASS,KAAKC,YAAYX,GAC1BA,EAAQY,SAjDR,EAAKC,MAAQ,CACTC,KAAM,GACNtB,MAAO,UACPuB,SAAU,GACV5B,cAAe,IAEnB,EAAKQ,OAASqB,IAAMC,YACpB,EAAKC,QAAUF,IAAMC,YACrB,EAAKE,OAASH,IAAMC,YACpB,EAAKG,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKxC,YAAc,EAAKA,YAAYwC,KAAjB,gBACnB,EAAKpC,mBAAqB,GAbX,E,kDAgBnB,SAAeqC,GACXC,KAAKtC,mBAAL,UAA6BqC,K,oBAqCjC,WAAU,IAAD,OACL,OACI,sBAAKE,UAAU,MAAMC,IAAKF,KAAK5B,OAA/B,UACI,qBAAK6B,UAAU,SAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,wBACIA,UAAU,4BACVE,QAAS,SAAC5C,GAAD,OAAO,EAAKD,YAAYC,IAFrC,iBAMA,wBACI0C,UAAU,8BAEVE,QAAS,SAAC5C,GAAD,OAAO,EAAKM,WAAWN,IAHpC,uBAMA,wBACI0C,UAAU,qBACVC,IAAKF,KAAKI,QACVD,QAAS,SAAC5C,GAAD,OAAO,EAAKiB,aAAajB,IAHtC,4BAOR,qBAAK0C,UAAU,eAAf,SACI,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,kBAAkBI,GAAG,cAApC,SACI,cAAC,IAAD,CACId,KAAK,OACLtB,MAAO+B,KAAKV,MAAMrB,MAClBqC,KAAK,eACLC,OAAQ,OACRC,MAAO,OACPC,SAAUT,KAAKH,eACfL,SAAUQ,KAAKV,MAAME,SACrBU,IAAKF,KAAKJ,WAIlB,qBAAKK,UAAU,GAAG3B,MAAO,CAAEoC,WAAY,QAAvC,SACI,wBAAQC,OAAQX,KAAKV,MAAM1B,cACvBqC,UAAU,gC,GAhGxBW,aCZlB1C,IAAS2C,OACL,cAAC,EAAD,IAAUnC,SAASoC,cAAc,Y","file":"static/js/main.4d97807a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport AceEditor from \"react-ace\";\nimport './App.css';\n\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/mode-html\";\nimport \"ace-builds/src-noconflict/snippets/html\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport 'ace-builds/src-noconflict/theme-github';\nimport 'ace-builds/src-noconflict/theme-mono_industrial';\nimport 'ace-builds/src-noconflict/theme-nord_dark';\nimport 'ace-builds/src-noconflict/theme-tomorrow_night';\nimport 'ace-builds/src-noconflict/theme-tomorrow_night_blue';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: '',\n            theme: 'eclipse',\n            fontSize: 14,\n            editorContent: ''\n        }\n        this.appRef = React.createRef();\n        this.modeRef = React.createRef();\n        this.aceRef = React.createRef();\n        this.onEditorChange = this.onEditorChange.bind(this);\n        this.executeCode = this.executeCode.bind(this);\n        this.editorContentValue = '';\n    }\n\n    onEditorChange(newValue) {\n        this.editorContentValue = `${newValue}`;\n    }\n\n    executeCode = (e) => {\n        console.log(this.editorContentValue);\n        this.setState({\n            editorContent: this.editorContentValue\n        })\n    }\n\n    changeMode = (event) => {\n        if (event.target.innerHTML === 'Dark Mode') {\n            event.target.innerHTML = 'Light Mode'\n            this.setState({\n                theme: 'tomorrow_night_blue'\n            })\n            ReactDOM.findDOMNode(this.appRef.current).style.background = 'black';\n        } else {\n            event.target.innerHTML = 'Dark Mode'\n            this.setState({\n                theme: 'github'\n            })\n            ReactDOM.findDOMNode(this.appRef.current).style.background = '#f2f5fa';\n        }\n\n    }\n\n    downloadCode = (e) => {\n\n        const element = document.createElement(\"a\");\n        const file = new Blob([`${this.editorContentValue}`], {type: 'text/plain'});\n        element.href = URL.createObjectURL(file);\n        element.download = \"download.txt\";\n        document.body.appendChild(element); \n        element.click();\n    }\n\n    render() {\n        return (\n            <div className=\"App\" ref={this.appRef}>\n                <div className=\"navbar\">\n                    <div className=\"button-container\">\n                        <button\n                            className=\"button run-button spacing\"\n                            onClick={(e) => this.executeCode(e)}\n                        >\n                            Run\n                            </button>\n                        <button\n                            className=\"button theme-button spacing\"\n                            // ref={this.modeRef}\n                            onClick={(e) => this.changeMode(e)}\n                        >Dark Mode</button>\n\n                        <button\n                            className=\"button save-button\"\n                            ref={this.saveRef}\n                            onClick={(e) => this.downloadCode(e)}\n                        >Save Code</button>\n                    </div>\n                </div>\n                <div className=\"page-wrapper\">\n                    <div className=\"flex-split\" >\n                        <div className=\"flex-split-left\" id=\"code-editor\">\n                            <AceEditor\n                                mode=\"html\"\n                                theme={this.state.theme}\n                                name=\"awesome-code\"\n                                height={\"100%\"}\n                                width={\"100%\"}\n                                onChange={this.onEditorChange}\n                                fontSize={this.state.fontSize}\n                                ref={this.aceRef}\n                            />\n                        </div>\n\n                        <div className=\"\" style={{ marginLeft: '10px' }}>\n                            <iframe srcDoc={this.state.editorContent}\n                                className=\"previewIframe\"\n                            ></iframe>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <App /> , document.querySelector('#root')\n)\n"],"sourceRoot":""}